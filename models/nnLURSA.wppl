
var num_utterances = 3
var num_worlds = 3
var h_size = 10

var nnparam = function(a, b) {
  return param([a, b], 0, 0.1);
};

var network = function(x, W, b) {
  var input = T.reshape(T.concat(x[0],x[1]),[x[0].length+x[1].length,1])
  var h = T.tanh(T.add(T.dot(W[0], input), b[0]));
  var output = T.add(T.dot(W[1], h), b[1]);
  return T.sumreduce(output)
};


var worldPrior = function() {
 var people = [Vector([1,0,0]),Vector([0,1,0]),Vector([0,0,1])]
 var num_nice_people = randomInteger(people.length) //3 people.. 0-3 can be nice.
 return people[num_nice_people]
}

var utterancePrior = function() {
  var utterances = [Vector([1,0,0]),Vector([0,1,0]),Vector([0,0,1])]
  var i = randomInteger(utterances.length)
  return nn_utils.sample_array(utterances)
}


var literalListener = cache(function(utterance,W,b) {
  Enumerate(function(){
    var world = worldPrior()
    factor(network([world,utterance],W,b))

    return world
  })
})

var speaker = cache(function(world,W,b) {
Enumerate(function(){
  var utterance = utterancePrior()
  var L = literalListener(utterance,W,b)

  factor(L.score([],world))

  return utterance
})})

var listener = cache(function(utterance,W,b) {
Enumerate(function(){
  var world = worldPrior()
  var S = speaker(world,W,b)
  factor(S.score([],utterance))
  return world
})
})

var sampleMatrixGaussian = function(dims,mean,variance,guide_mean){
  var length = dims[0]*dims[1]
  var g = sample(diagCovGaussianERP,[Vector(repeat(length, constF(mean))),Vector(repeat(length, constF(variance)))],
    {guide: [diagCovGaussianERP, [T.reshape(guide_mean,[length,1]),Vector(repeat(length, constF(0.001)))]]})
  return T.reshape(g,dims)
}

var model = function() {


  var W0_var = nnparam(h_size,num_worlds+num_utterances)
  var W1_var = nnparam(1,h_size)
  var b0_var = nnparam(h_size,1)
  var b1_var = nnparam(1,1)

  var W0 = sampleMatrixGaussian([h_size,num_worlds+num_utterances],0,10,W0_var)
  var W1 = sampleMatrixGaussian([1,h_size],0,10,W1_var)
  var b0 = sampleMatrixGaussian([h_size,1],0,10,b0_var)
  var b1 = sampleMatrixGaussian([1,1],0,10,b1_var)

  var num_samples = 10
  var W0_offsets = repeat(num_samples,function(){return sample(matrixGaussianERP,0,1,W0.size)})
  var W1_offsets = repeat(num_samples,function(){return sample(matrixGaussianERP,0,1,W1.size)})
  var b0_offsets = repeat(num_samples,function(){return sample(matrixGaussianERP,0,1,b0.size)})
  var b1_offsets = repeat(num_samples,function(){return sample(matrixGaussianERP,0,1,b1.size)})

  console.log(W0_offsets)
  var l1s = mapN(function(n){return listener(Vector([0,0,1]),[W0+W0_offsets[n],W1+W1_offsets[n]],[b0+b0_offsets[n],b1+b1_offsets[n]])},
    num_samples)
  console.log(l1s)

  var avg_l1 = function(w){return -1*Math.log(num_samples)+util.logsumexp(map(function(x){return x.score([],w)},l1s))}
  //var l1 = listener(Vector([0,0,1]),[W0,W1],[b0,b1])
  //var l2 = listener(Vector([0,1,0]),[W0,W1],[b0,b1])


  factor(avg_l1(Vector([0,0,1])))

  return W0;
};

// VI.
var params = Optimize(model, {steps: 2000, method: {gd: {stepSize: 0.01}}, estimator: {ELBO: {samples: 1}}});

// Optimized params.
console.log(JSON.stringify(params))